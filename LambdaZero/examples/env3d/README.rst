Generating  molecules in 3D
===========================

This sub-package implements experiments to predict the next block and its
attachment angle, given a parent molecule and the attachment point.

The long term goal of this work is to give the reinforcement learning agent control
over space geometry through the attachment angle. This work aims to validate that it is
possible to learn (next block, angle).

Modules
------------

- `env3d_model_trainer.py`

  Defines class `Env3dModelTrainer`, a class derived from `tune.Trainable` that drives the
  model training.

- `epoch_stepper.py`

  Contains the definitions of `train_epoch` and `eval_epoch`, to be passed to
  tune.run.

- `geometry.py`

  Functions to compute molecular moments of inertia and rotate molecules
  in 3D space.

- `loss.py`

  Defines `class_and_angle_loss`, the method that computes the model loss.

- `molecular_connection.py`

  Defines the class `MolecularConnection`, a convenience object that helps to
  decide if two molecules represented as RDKIT `Mol` objects are parent and child, or the same.

- `parameter_inputs.py`

  Utility methods to parse input arguments.

- `rdkit_utilities.py`

  Convenience functions that wrap together various RDKIT functionalities
  to achieve specific goals.

- `train_model.py`

  Main script that builds the config dictionary from input and exeutes `tune.run`.

- `utilities.py`

  Ancillary code to perform useful generic things.

- `wandb_logger.py`

  Defines the class `LambdaZeroWandbLogger`, a wrapper for wandb's own ray-flavored `WandbLogger`.
  The latter logger is not equiped to handle config arguments that are not strings or floats. Since
  we are passing classes and functions in the config dictionary, these must be filtered out for
  wandb to work properly.

Sub-folders
------------

- **convergence_analysis**:

  The code in this package investigates the convergence properties of RDKIT with
  respect to the number of configurations that are embedded and then optimized.

- **dataset**:

  Code to generate a dataset of (parent molecules, [child block, child angle]), where the
  parent molecule is generated by a random walk and the child molecule (ie, parent + one block)
  is embedded and relaxed with rdkit.


- **model_analysis**:
  Scripts to evaluate model performance, visualize confusion matrices, etc.

- **models**:
  Definition of the pytorch models.

- **sanity_checks**:

  Various scripts to test assumptions about RDKIT.

- **scripts**:

  bash script and example json input to drive the training code.

- **tests**:

  Unit tests.
