# An unique identifier for the head node and workers of this cluster.
cluster_name: covid

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
min_workers: 0

# The maximum number of workers nodes to launch in addition to the head
# node. This takes precedence over min_workers.
max_workers: 10

# The initial number of worker nodes to launch in addition to the head
# node. When the cluster is first brought up (or when it is refreshed with a
# subsequent `ray up`) this number of nodes will be started.
initial_workers: 5

# Whether or not to autoscale aggressively. If this is enabled, if at any point
#   we would start more workers, we start at least enough to bring us to
#   initial_workers.
autoscaling_mode: default

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
# docker:
#     image: "" # e.g., tensorflow/tensorflow:1.5.0-py3
#     container_name: "" # e.g. ray_docker
#     # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
#     # if no cached version is present.
#     pull_before_run: True
#     run_options: []  # Extra options to pass into "docker run"
#
#     # Example of running a GPU head with CPU workers
#     # head_image: "tensorflow/tensorflow:1.13.1-py3"
#     # head_run_options:
#     #     - --runtime=nvidia
#
#     # worker_image: "ubuntu:18.04"
#     # worker_run_options: []

# The autoscaler will scale up the cluster to this target fraction of resource
# usage. For example, if a cluster of 10 nodes is 100% busy and
# target_utilization is 0.8, it would resize the cluster to 13. This fraction
# can be decreased to increase the aggressiveness of upscaling.
# This value must be less than 1.0 for scaling to happen.
target_utilization_fraction: 0.8

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 10

# Cloud-provider specific configuration.
provider:
    type: aws
    region: us-east-1
    # Availability zone(s), comma-separated, that nodes may be launched in.
    # Nodes are currently spread between zones by a round-robin approach,
    # however this implementation detail should not be relied upon.
    availability_zone: us-east-1a, us-east-1b

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

# Provider-specific config for the head node, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
head_node:
    InstanceType: m5a.24xlarge
    #ImageId: ami-0dbb717f493016a1a
    ImageId: ami-0dca5a27e7adb8c0b
    SubnetIds:
     - subnet-08ce821a820f36705 # a
     - subnet-0acad998b2f6fa54a # b
     - subnet-05e2f01382fc77a2d # c
     - subnet-020042f567b8cc4a7 # d
     #- subnet-0f8810f5729329669
     #- subnet-0d2d97d3e5e60336b # f

    # You can provision additional disk space with a conf as follows
    #BlockDeviceMappings:
    #    - DeviceName: /dev/sda1
    #      Ebs:
    #          VolumeSize: 100

    # Additional options in the boto docs.

# Provider-specific config for worker nodes, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
worker_nodes:
    InstanceType: c5.18xlarge
    #ImageId: ami-0dbb717f493016a1a
    ImageId: ami-0dca5a27e7adb8c0b
    SubnetIds:
     - subnet-0782bb0f3b195fa9b # c
     - subnet-025b0d94456268676
     - subnet-054e3e5cd9790b170
     #- subnet-07977cb16e9264a4e
     #- subnet-0952c6b3851a0651a
     - subnet-024698d61cadd77f4  # This is a but is pricier

    # Run workers on spot by default. Comment this out to use on-demand.
    InstanceMarketOptions:
        MarketType: spot
        # Additional options can be found in the boto docs, e.g.
        SpotOptions:
            MaxPrice: "3.06"

    # Additional options in the boto docs.

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
    "/home/ubuntu/LambdaZero": "~/ext/LambdaZero",
}

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands:
   - sudo mount -t lustre -o noatime,flock fs-025ed2ceb7bd10473.fsx.us-east-1.amazonaws.com@tcp:/hm5wpbmv /fsx || sudo mount -t lustre -o remount,noatime,flock fs-025ed2ceb7bd10473.fsx.us-east-1.amazonaws.com@tcp:/hm5wpbmv /fsx

# List of shell commands to run to set up nodes.
setup_commands: []

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []
    #- pip install boto3==1.4.8  # 1.4.8 adds InstanceMarketOptions

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - conda activate lzc && ray stop
    - ulimit -n 65536; conda activate lzc && ray start --head --redis-port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - conda activate lzc && ray stop
    - "ulimit -n 65536; conda activate lzc && ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076 --resources '{\"aws-machine\": 1}'"
